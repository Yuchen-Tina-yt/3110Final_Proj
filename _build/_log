### Starting build.
# Target: player.mli.depends, tags: { package(ANSITerminal), extension:mli, file:player.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -modules player.mli > player.mli.depends # cached
# Target: item.mli.depends, tags: { package(ANSITerminal), extension:mli, file:item.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -modules item.mli > item.mli.depends # cached
# Target: item.cmi, tags: { package(ANSITerminal), byte, compile, extension:mli, file:item.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -o item.cmi item.mli # cached
# Target: player.cmi, tags: { package(ANSITerminal), byte, compile, extension:mli, file:player.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -o player.cmi player.mli # cached
# Target: player.ml.depends, tags: { package(ANSITerminal), extension:ml, file:player.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -modules player.ml > player.ml.depends # cached
# Target: player.cmo, tags: { package(ANSITerminal), byte, compile, extension:cmo, extension:ml, file:player.cmo, file:player.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -o player.cmo player.ml # cached
# Target: bank.mli.depends, tags: { package(ANSITerminal), extension:mli, file:bank.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -modules bank.mli > bank.mli.depends # cached
# Target: bank.cmi, tags: { package(ANSITerminal), byte, compile, extension:mli, file:bank.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -o bank.cmi bank.mli # cached
# Target: bank.ml.depends, tags: { package(ANSITerminal), extension:ml, file:bank.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -modules bank.ml > bank.ml.depends # cached
# Target: bank.cmo, tags: { package(ANSITerminal), byte, compile, extension:cmo, extension:ml, file:bank.cmo, file:bank.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -o bank.cmo bank.ml # cached
# Target: country.mli.depends, tags: { package(ANSITerminal), extension:mli, file:country.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -modules country.mli > country.mli.depends # cached
# Target: country.cmi, tags: { package(ANSITerminal), byte, compile, extension:mli, file:country.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -o country.cmi country.mli # cached
# Target: country.ml.depends, tags: { package(ANSITerminal), extension:ml, file:country.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -modules country.ml > country.ml.depends # cached
# Target: country.cmo, tags: { package(ANSITerminal), byte, compile, extension:cmo, extension:ml, file:country.cmo, file:country.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -o country.cmo country.ml # cached
# Target: item.ml.depends, tags: { package(ANSITerminal), extension:ml, file:item.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -modules item.ml > item.ml.depends # cached
# Target: item.cmo, tags: { package(ANSITerminal), byte, compile, extension:cmo, extension:ml, file:item.cmo, file:item.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -o item.cmo item.ml # cached
# Target: place.mli.depends, tags: { package(ANSITerminal), extension:mli, file:place.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -modules place.mli > place.mli.depends # cached
# Target: place.cmi, tags: { package(ANSITerminal), byte, compile, extension:mli, file:place.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -o place.cmi place.mli # cached
# Target: place.ml.depends, tags: { package(ANSITerminal), extension:ml, file:place.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -modules place.ml > place.ml.depends # cached
# Target: place.cmo, tags: { package(ANSITerminal), byte, compile, extension:cmo, extension:ml, file:place.cmo, file:place.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -o place.cmo place.ml # cached
# Target: gamestate.mli.depends, tags: { package(ANSITerminal), extension:mli, file:gamestate.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -modules gamestate.mli > gamestate.mli.depends # cached
# Target: gamestate.cmi, tags: { package(ANSITerminal), byte, compile, extension:mli, file:gamestate.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -o gamestate.cmi gamestate.mli # cached
# Target: gamestate.ml.depends, tags: { package(ANSITerminal), extension:ml, file:gamestate.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -modules gamestate.ml > gamestate.ml.depends
# Target: gamestate.cmo, tags: { package(ANSITerminal), byte, compile, extension:cmo, extension:ml, file:gamestate.cmo, file:gamestate.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -o gamestate.cmo gamestate.ml
# Target: main.ml.depends, tags: { package(ANSITerminal), extension:ml, file:main.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -modules main.ml > main.ml.depends # cached
# Target: command.mli.depends, tags: { package(ANSITerminal), extension:mli, file:command.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -modules command.mli > command.mli.depends # cached
# Target: command.cmi, tags: { package(ANSITerminal), byte, compile, extension:mli, file:command.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -o command.cmi command.mli # cached
# Target: main.cmo, tags: { package(ANSITerminal), byte, compile, extension:cmo, extension:ml, file:main.cmo, file:main.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -o main.cmo main.ml # cached
# Target: command.ml.depends, tags: { package(ANSITerminal), extension:ml, file:command.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ANSITerminal -modules command.ml > command.ml.depends # cached
# Target: command.cmo, tags: { package(ANSITerminal), byte, compile, extension:cmo, extension:ml, file:command.cmo, file:command.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ANSITerminal -o command.cmo command.ml # cached
# Compilation successful.
