### Starting build.
# Target: test.ml.depends, tags: { package(ANSITerminal), package(OUnit), debug, extension:ml, file:test.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package OUnit -package ANSITerminal -modules test.ml > test.ml.depends
# Target: country.mli.depends, tags: { package(ANSITerminal), package(OUnit), debug, extension:mli, file:country.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package OUnit -package ANSITerminal -modules country.mli > country.mli.depends
# Target: money.mli.depends, tags: { package(ANSITerminal), package(OUnit), debug, extension:mli, file:money.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package OUnit -package ANSITerminal -modules money.mli > money.mli.depends
# Target: place.mli.depends, tags: { package(ANSITerminal), package(OUnit), debug, extension:mli, file:place.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package OUnit -package ANSITerminal -modules place.mli > place.mli.depends
# Target: player.mli.depends, tags: { package(ANSITerminal), package(OUnit), debug, extension:mli, file:player.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package OUnit -package ANSITerminal -modules player.mli > player.mli.depends
# Target: money.cmi, tags: { package(ANSITerminal), package(OUnit), byte, compile, debug, extension:mli, file:money.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package OUnit -package ANSITerminal -o money.cmi money.mli
# Target: weapon.mli.depends, tags: { package(ANSITerminal), package(OUnit), debug, extension:mli, file:weapon.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package OUnit -package ANSITerminal -modules weapon.mli > weapon.mli.depends
# Target: weapon.cmi, tags: { package(ANSITerminal), package(OUnit), byte, compile, debug, extension:mli, file:weapon.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package OUnit -package ANSITerminal -o weapon.cmi weapon.mli
# Target: country.cmi, tags: { package(ANSITerminal), package(OUnit), byte, compile, debug, extension:mli, file:country.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package OUnit -package ANSITerminal -o country.cmi country.mli
# Target: place.cmi, tags: { package(ANSITerminal), package(OUnit), byte, compile, debug, extension:mli, file:place.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package OUnit -package ANSITerminal -o place.cmi place.mli
# Target: player.cmi, tags: { package(ANSITerminal), package(OUnit), byte, compile, debug, extension:mli, file:player.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package OUnit -package ANSITerminal -o player.cmi player.mli
# Target: test.cmo, tags: { package(ANSITerminal), package(OUnit), byte, compile, debug, extension:cmo, extension:ml, file:test.cmo, file:test.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package OUnit -package ANSITerminal -o test.cmo test.ml
# Target: country.ml.depends, tags: { package(ANSITerminal), package(OUnit), debug, extension:ml, file:country.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package OUnit -package ANSITerminal -modules country.ml > country.ml.depends
# Target: money.ml.depends, tags: { package(ANSITerminal), package(OUnit), debug, extension:ml, file:money.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package OUnit -package ANSITerminal -modules money.ml > money.ml.depends
# Target: place.ml.depends, tags: { package(ANSITerminal), package(OUnit), debug, extension:ml, file:place.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package OUnit -package ANSITerminal -modules place.ml > place.ml.depends
# Target: player.ml.depends, tags: { package(ANSITerminal), package(OUnit), debug, extension:ml, file:player.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package OUnit -package ANSITerminal -modules player.ml > player.ml.depends
# Target: country.cmo, tags: { package(ANSITerminal), package(OUnit), byte, compile, debug, extension:cmo, extension:ml, file:country.cmo, file:country.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package OUnit -package ANSITerminal -o country.cmo country.ml
# Target: money.cmo, tags: { package(ANSITerminal), package(OUnit), byte, compile, debug, extension:cmo, extension:ml, file:money.cmo, file:money.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package OUnit -package ANSITerminal -o money.cmo money.ml
# Target: place.cmo, tags: { package(ANSITerminal), package(OUnit), byte, compile, debug, extension:cmo, extension:ml, file:place.cmo, file:place.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package OUnit -package ANSITerminal -o place.cmo place.ml
# Target: player.cmo, tags: { package(ANSITerminal), package(OUnit), byte, compile, debug, extension:cmo, extension:ml, file:player.cmo, file:player.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package OUnit -package ANSITerminal -o player.cmo player.ml
# Target: weapon.ml.depends, tags: { package(ANSITerminal), package(OUnit), debug, extension:ml, file:weapon.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package OUnit -package ANSITerminal -modules weapon.ml > weapon.ml.depends
# Target: weapon.cmo, tags: { package(ANSITerminal), package(OUnit), byte, compile, debug, extension:cmo, extension:ml, file:weapon.cmo, file:weapon.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package OUnit -package ANSITerminal -o weapon.cmo weapon.ml
# Target: test.byte, tags: { package(ANSITerminal), package(OUnit), byte, debug, dont_link_with, extension:byte, file:test.byte, link, ocaml, program, quiet, traverse }
ocamlfind ocamlc -linkpkg -g -package OUnit -package ANSITerminal country.cmo money.cmo weapon.cmo player.cmo place.cmo test.cmo -o test.byte
# Compilation successful.
